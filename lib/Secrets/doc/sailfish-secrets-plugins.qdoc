/****************************************************************************************
**
** Copyright (C) 2018 Jolla Ltd.
** Contact: Chris Adams <chris.adams@jollamobile.com>
** All rights reserved.
**
****************************************************************************************/

/*!
\contentspage {Sailfish OS Secrets Plugins Contents}
\page sailfish-secrets-plugins.html

\title Default Secrets Plugins for the Sailfish OS Secrets and Crypto Framework

A number of plugins have been written for the framework which provide
a variety of functionality for clients to use.  Most clients should use
the platform default plugins when writing their applications, as these
will provide the most consistent and secure experience.

Device vendors and trusted partners may wish to provide their own plugins,
and some applications may wish to specifically use those plugins.

\section1 Default Secrets Plugins

Currently, there are several Sailfish OS Secrets plugins shipped by default:

\list
\li org.sailfishos.secrets.plugin.encryption.openssl
\li org.sailfishos.secrets.plugin.storage.sqlite
\li org.sailfishos.secrets.plugin.encryptedstorage.sqlcipher
\li org.sailfishos.secrets.plugin.authentication.inapp
\endlist

The first plugin is used internally to encrypt the data in a secret when that
secret is either standalone or stored in a collection in unencrypted storage.
This plugin uses the OpenSSL library to perform the encryption.

The second plugin provides unencrypted storage for collections of secrets.

The third plugin provides (block-level) encrypted storage for collections of
secrets (using the popular SQLCipher as its database storage backend).  When
using this plugin, every collection is stored in its own database.  Note: this
plugin is also a Sailfish OS Crypto plugin.

The fourth plugin provides in-application authentication flows, for cases
where the user trusts the application with the authentication data, rather
than using the system-mediated authentication flows (e.g. device lock).

Note that neither of these plugins use TEE/TPM or other secure-hardware
to implement the cryptographic functionality.

\section1 Which Plugin Should My Application Use?

We recommend that the system default EncryptedStorage plugin be used where
possible.  In most cases, this will be the
"org.sailfishos.secrets.plugin.encryptedstorage.sqlcipher" plugin.

In order to use the system default EncryptedStorage plugin, it should be
specified for both the encryption plugin and storage plugin parameters when
invoking a method via the SecretManager.

The following snippet shows an example of creating a collection of secrets
in an encrypted database managed by the default encrypted storage plugin:

\code
Sailfish::Secrets::SecretManager sm;
QDBusPendingReply<Sailfish::Secrets::Result>
        collectionReply = sm.createCollection(
                QLatin1String("ExampleCollection"),
                Sailfish::Secrets::SecretManager::DefaultEncryptedStoragePluginName,
                Sailfish::Secrets::SecretManager::DefaultEncryptedStoragePluginName,
                Sailfish::Secrets::SecretManager::DeviceLockKeepUnlocked,
                Sailfish::Secrets::SecretManager::OwnerOnlyMode);
collectionReply.waitForFinished();
if (collectionReply.argumentAt<0>().code() == Sailfish::Secrets::Result::Failed) {
    qWarning() << "Failed to create collection:"
               << collectionReply.argumentAt<0>().errorMessage();
}
\endcode

If standalone secrets are required for any reason, we recommend that the
application uses the default EncryptionPlugin and default StoragePlugin.
In most cases, these will be the
"org.sailfishos.secrets.plugin.encryption.openssl" and
"org.sailfishos.secrets.plugin.storage.sqlite" plugins respectively.

The following snippet shows an example of storing a standalone, device-lock
protected secret in the default storage plugin:

\code
// Define a standalone secret (no collection name specified in the identifier)
Sailfish::Secrets::Secret standaloneSecret(
        Sailfish::Secrets::Secret::Identifier("StandaloneSecret"));
standaloneSecret.setData("Example secret data");
standaloneSecret.setType(Secret::TypeBlob);
standaloneSecret.setFilterData(QLatin1String("domain"),
                               QLatin1String("sailfishos.org"));
standaloneSecret.setFilterData(QLatin1String("example"),
                               QLatin1String("true"));

// Request that the secret be stored by the default storage plugin
Sailfish::Secrets::SecretManager sm;
QDBusPendingReply<Sailfish::Secrets::Result>
        secretReply = sm.setSecret(
            Sailfish::Secrets::SecretManager::DefaultStoragePluginName,
            Sailfish::Secrets::SecretManager::DefaultEncryptionPluginName,
            standaloneSecret,
            Sailfish::Secrets::SecretManager::DeviceLockKeepUnlocked,
            Sailfish::Secrets::SecretManager::OwnerOnlyMode,
            Sailfish::Secrets::SecretManager::ApplicationInteraction);
secretReply.waitForFinished();
if (secretReply.argumentAt<0>().code() == Sailfish::Secrets::Result::Failed) {
    qWarning() << "Failed to store secret:"
               << secretReply.argumentAt<0>().errorMessage();
}
\endcode

*/
