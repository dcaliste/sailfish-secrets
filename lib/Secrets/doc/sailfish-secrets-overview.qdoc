/****************************************************************************************
**
** Copyright (C) 2018 Jolla Ltd.
** Contact: Chris Adams <chris.adams@jollamobile.com>
** All rights reserved.
**
****************************************************************************************/

/*!
\contentspage {Sailfish OS Secrets Library Contents}
\page sailfish-secrets-overview.html

\title Sailfish OS Secrets Library Overview

The Sailfish OS Secrets Library provides applications with API to access the
secure storage functionality offered by the system service daemon as part of
the Sailfish OS Secrets and Crypto Framework. Please see the Sailfish OS
Secrets and Crypto Framework documentation for more in-depth documentation
about the framework architecture, and broad overview of the features the
framework provides.

\section1 Using the Sailfish OS Secrets Library

As described in the Sailfish OS Secrets and Crypto Framework overview
documentation, client applications can use the Sailfish OS Secrets Library
in order to make use of the secure storage services provided by the
Sailfish OS Secrets and Crypto Framework.

This library provides client applications written in C++ (with Qt) with API to
make use of the secure storage services provided by the Sailfish OS Secrets and
Crypto Framework.

To make use of this library, applications should depend on the
"sailfishsecrets.pc" pkgconfig file.

e.g. in a qmake-based project:

\code
CONFIG += link_pkgconfig
PKGCONFIG += sailfishsecrets
\endcode

\section2 Client API

The client API consists of a variety of C++ classes which represent the
inputs to secure storage operations (including secrets of various types),
the result of a secure storage operation (that is, whether it succeeded or
failed, along with some information about the reason for the failure),
and one class which provides an interface to the remote service.

\list
\li \l{Sailfish::Secrets::Secret} represents a (possibly partial or reference) secret
\li \l{Sailfish::Secrets::Secret::Identifier} consists of a secret name and optionally a collection name
\li \l{Sailfish::Secrets::Result} represents the result (but not the output) of a secure storage operation
\li \l{Sailfish::Secrets::SecretManager} provides an interface to the system secure storage service
\endlist

There also exist some API for dealing with authentication flows which require
user interaction, where that user interaction is not mediated by the system
(e.g., device lock). These APIs are listed here only for the sake of
completeness as most applications should never use them:

\list
\li \l{Sailfish::Secrets::InteractionRequest} represents a request for authorization or other user interaction
\li \l{Sailfish::Secrets::InteractionResponse} represents a response to an interaction request
\li \l{Sailfish::Secrets::InteractionRequestWatcher} represents a watcher on an interaction request
\li \l{Sailfish::Secrets::InteractionView} provides a view for user interaction
\endlist

As described previously, these APIs are only useful for applications which
implement in-process authentication flows rather than using the system-mediated
authentication flows, and thus only apply to device vendor- or partner-supplied
applications, and even then they need not be directly used if the appropriate
QML plugin is used to provide this functionality within the application.

\section3 Supported Operations

The secure storage operations which are supported and offered by the
Sailfish OS Secrets and Crypto Framework are documented thoroughly in the
\l{Sailfish::Secrets::SecretManager} class documentation.  They are included
briefly here for reference:

\list
\li Create a device-lock-protected collection of secrets
\li Create a custom-lock-protected collection of secrets
\li Delete a collection of secrets
\li Store a secret into a collection
\li Retrieve a secret from a collection
\li Delete a secret from a collection
\li Store a standalone secret
\li Retrieve a standalone secret
\li Delete a standalone secret
\li Find secrets based on filter data
\endlist

\section3 Usage Examples

The examples directory in the source repository contains a variety of examples
of usage of the Sailfish OS Crypto Library as well as the Sailfish OS Secrets
Library.  Please see those for complete, working examples.

Some snippets showing commonly-required functionality are included below.

\section4 Creating a block-encrypted collection of secrets

This snippet shows how to create a block-encrypted collection of secrets
which will be automatically locked when the device is locked, and unlocked
when the device is unlocked.  The client specifies the type of storage
to create the collection in, along with the required locking and access
control semantics, as parameters to the call to the \tt{createCollection()}
method, which results in an IPC call to the Sailfish OS Secrets and Crypto
Framework system service.

The Sailfish OS Secrets and Crypto Framework system service will then delegate
the operation to the specified storage plugin, which in turn will generate a
block-level encrypted database file for the collection.

Note that these operations are all asynchronous, however in the snippet we
force the operation to be synchronous by calling the \tt{waitForFinished()}
method on the reply object.  In practice, the client application should instead
use a watcher object which will notify when the operation is complete.

\code
Sailfish::Secrets::SecretManager sm;
QDBusPendingReply<Sailfish::Secrets::Result>
        collectionReply = sm.createCollection(
                QLatin1String("ExampleCollection"),
                Sailfish::Secrets::SecretManager::DefaultEncryptedStoragePluginName,
                Sailfish::Secrets::SecretManager::DefaultEncryptedStoragePluginName,
                Sailfish::Secrets::SecretManager::DeviceLockKeepUnlocked,
                Sailfish::Secrets::SecretManager::OwnerOnlyMode);
collectionReply.waitForFinished();
if (collectionReply.argumentAt<0>().code() == Sailfish::Secrets::Result::Failed) {
    qWarning() << "Failed to create collection:"
               << collectionReply.argumentAt<0>().errorMessage();
}
\endcode

\section4 Storing a secret into a collection

After creating a collection, an application may wish to store a secret into
that collection.  To do so, the client specifies the name of the collection
in the identifier of the secret, along with the secret's own name.

Once the identifier is set, the client can set the secret data into the
secret, and specify some metadata and filter tags, before performing the
call to request that the secret be stored in the collection by the
system service.

\code
// Define the secret.
Sailfish::Secrets::Secret exampleSecret(
        Sailfish::Secrets::Secret::Identifier(
                QLatin1String("ExampleSecret"),
                QLatin1String("ExampleCollection")));
testSecret.setData("Some secret data");
testSecret.setType(Sailfish::Secrets::Secret::TypeBlob);
testSecret.setFilterData(QLatin1String("domain"),
                         QLatin1String("sailfishos.org"));
testSecret.setFilterData(QLatin1String("example"),
                         QLatin1String("true"));

// Request that the secret be securely stored.
QDBusPendingReply<Sailfish::Secrets::Result>
        storeReply = sm.setSecret(
                testSecret,
                Sailfish::Secrets::SecretManager::SystemInteraction);
storeReply.waitForFinished();
if (storeReply.argumentAt<0>().code() == Sailfish::Secrets::Result::Failed) {
    qWarning() << "Failed to store secret:"
               << storeReply.argumentAt<0>().errorMessage();
}
\endcode

\section4 Retrieving a secret from a collection

A secret may be retrieved from a collection either by specifying the secret's
identifier, or by specifying filter tags which are used to find matching
secrets.  The APIs are very similar, here we will show the case where the
identifier is known (e.g. this would be the case if this application
originally stored the secret).

\code
QDBusPendingReply<Sailfish::Secrets::Result, Sailfish::Secrets::Secret>
        secretReply = sm.getSecret(
                testSecret.identifier(),
                Sailfish::Secrets::SecretManager::SystemInteraction);
secretReply.waitForFinished();
if (secretReply.argumentAt<0>().code() == Sailfish::Secrets::Result::Failed) {
    qWarning() << "Failed to retrieve secret:"
               << secretReply.argumentAt<0>().errorMessage();
} else {
    qDebug() << "The secret data is:"
             << secretReply.argumentAt<1>().data();
}
\endcode

\section4 Deleting a secret or a collection

An application may want to delete a secret (or a collection of secrets) at
some point, after the secret data is no longer valid.  The API to delete
a collection is very similar to that for deleting a secret, so only the
latter will be shown below.

\code
QDBusPendingReply<Sailfish::Secrets::Result>
        deleteReply = sm.deleteSecret(
                Sailfish::Secrets::Secret::Identifier("ExampleSecret",
                                                      "ExampleCollection"),
                SecretManager::ApplicationInteraction);
deleteReply.waitForFinished();
if (deleteReply.argumentAt<0>().code() == Sailfish::Secrets::Result::Failed) {
    qWarning() << "Failed to delete secret:"
               << deleteReply.argumentAt<0>().errorMessage();
}
\endcode

\section1 Extending the Sailfish OS Secrets and Crypto Framework with Secrets Plugins

The Sailfish OS Secrets Library also provides a plugin base-class which may be
extended by device vendors or trusted partners to allow them to build plugins
to extend the Sailfish OS Secrets and Crypto Framework with additional
secure storage functionality (for example, supporting different algorithms or
databases, or performing the operations via a Trusted Execution Environment
application rather than in-process in the rich application process).

The following classes may be extended in order to achieve this, and the
resulting plugins should be installed into the
\tt{/usr/lib/Sailfish/Secrets/} directory.

\list
\li \l{Sailfish::Secrets::EncryptionPlugin} to value-encrypt secrets
\li \l{Sailfish::Secrets::StoragePlugin} to store value-encrypted secrets
\li \l{Sailfish::Secrets::EncryptedStoragePlugin} to store block-encrypted collections of secrets
\li \l{Sailfish::Secrets::AuthenticationPlugin} to implement alternative user authentication flows
\endlist

A variety of plugins are shipped by default with the framework, and these are
documented at the page about
\l{Default Secrets Plugins for the Sailfish OS Secrets and Crypto Framework}.

*/
